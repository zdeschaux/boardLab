#!/usr/bin/env python
import sys, inspect
from cairoStuff import *
from pcb import *
from config import *
import gobject, tracking
import threading
import time, json
import signal

class TrackingSignaller(gobject.GObject):
    def __init__(self):
        self.__gobject_init__()


       
gobject.type_register(TrackingSignaller)
gobject.signal_new("tracking_frame", TrackingSignaller, gobject.SIGNAL_RUN_FIRST,gobject.TYPE_NONE, (str,))

#Eventually this will be replaced by a event driven system, and the events will be generated by the AutoLoader,PCB, etc stuff
def displayLoop():
    while(1):
        time.sleep(1)

def displaySignalHandler(a,b):
    print 'received display event',a

class AutoLoader(object):
    def __init__(self,gtkWindow):
        self.loadingDict = {
            279:('pcb','funo.brd'),
            211:('selectTool','red'),
            107:('selectTool','green'),
            331:('selectTool','blue'),
        }

        self.objects = {}
        self.window = gtkWindow
        
        fileName = self.loadingDict[279][1] 
        print "Loading PCB %s"%(fileName,)
        self.pcb = PCB(fileName,displayCallback=self.displayCallback)
        self.pcb.show( )
        window.add(self.pcb)
        
    def processTrackingFrame(self,b,data):
        a = json.loads(data)
        #print 'received trackingFrame',b,a
        if a != {}:
            if tracking.pcb_id in a:
                self.pcb.x = a[tracking.pcb_id]['x'] 
                self.pcb.y = a[tracking.pcb_id]['y']
                self.pcb.rot = a[tracking.pcb_id]['angle'] - self.pcb.rotBias
                self.pcb.rot = 0
            else:
                self.pcb.x = 500
                self.pcb.y = 500
                self.pcb.rot = 00
                        
            if tracking.selectTool_id in a:
                self.pcb.selectTool.activated = True
                self.pcb.selectTool.x = a[tracking.selectTool_id]['x']-12
                self.pcb.selectTool.y = a[tracking.selectTool_id]['y']+12
                a = self.pcb.findModuleUnderMouse(self.pcb.selectTool.x,self.pcb.selectTool.y)
                if a is not None:
                    self.displayCallback(a)
                    pass
                else:
                    self.selectTool.activated = False
        else:
            self.x = 00
            self.y = 00
            self.rot = 0

    def displayCallback(self,a):
        print "emitting display event..",a


def trackingLoop(sender):
    if demoFrame is  None:
        trackingObject = tracking.tracking()
        trackingObject.connect()
    while(1):
        if demoFrame is not None:
            sender.emit("tracking_frame",json.dumps(demoFrame))
        else:
            a = trackingObject.getFrame()
            sender.emit("tracking_frame",json.dumps(a))



if __name__=="__main__":
    window = gtk.Window( )
    window.connect( "delete-event", gtk.main_quit )
    window.set_size_request ( width, height )

    autoLoader = AutoLoader(window)
    trackingSignaller = TrackingSignaller()
    trackingSignaller.connect("tracking_frame",autoLoader.processTrackingFrame)

    trackingThread = threading.Thread(target=trackingLoop,args=(trackingSignaller,))
    trackingThread.start()

    displayThread = threading.Thread(target=displayLoop)
    displayThread.start()

    window.present( )
    gtk.main()

